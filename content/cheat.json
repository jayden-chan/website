{
  "cards": [
    {
      "code": "ffmpeg -ss hh:mm:ss -i input.mp4 -t hh:mm:ss (clip length) output.mp4",
      "langage": "bash",
      "tags": ["ffmpeg", "clip", "cut", "video"],
      "title": "[Linux] Cut video clip with ffmpeg"
    },
    {
      "code": "# Select the files to be archived\nfd . './Folder1' './Folder2' > files.txt\n\n# Perform the compression (takes a long time)\ncompress dev-YYYY-MM-DD.tar.xz -T files.txt\n",
      "language": "bash",
      "tags": ["dev", "compress", "archive", "tar", "xz", "fd"],
      "title": "[Linux] Archive Dev folder"
    },
    {
      "code": ":windo diffthis",
      "tags": ["vim", "diff", "splits"],
      "title": "[Vim] Take a diff between splits"
    },
    {
      "code": "udisksctl unmount -b /dev/sdxn\nudisksctl power-off -b /dev/sdx\n",
      "language": "bash",
      "tags": ["hard drive", "safe", "unmount", "detach", "eject"],
      "title": "[Linux] Safely disconnect external drive"
    },
    {
      "code": "# Create a new temp account with sudo rights\nsudo adduser temp\nsudo adduser temp sudo\n\n# Log out from your current account and back in with the temp account on a new TTY\n# Rename user and home dir\nsudo usermod -l new-username -m -d /home/new-username old-username\n\n# Rename your username default's group:\nsudo groupmod -n new-username old-username\n\n# Log out from temp account and log back into your account with new-username.\n# Remove temp account\nsudo userdel -r temp\n",
      "language": "bash",
      "tags": ["linux", "user", "rename", "adduser", "usermod"],
      "title": "[Linux] Rename a user"
    },
    {
      "code": ":ctrl-r ctrl-r <register>",
      "tags": ["vim", "macro"],
      "title": "[Vim] Paste contents of macro into command line"
    },
    {
      "code": "command | xclip -selection c",
      "language": "bash",
      "tags": ["linux", "clipboard", "pipe", "command"],
      "title": "[Linux] Pipe command output to clipboard"
    },
    {
      "code": "convert 1.jpg 2.jpg -rotate 90 -page Letter -quality 50 out.pdf",
      "language": "bash",
      "tags": ["linux", "convert", "imagemagick"],
      "title": "[Linux] Convert JPGs to PDF"
    },
    {
      "code": "pdftk one.pdf two.pdf cat output combined.pdf",
      "language": "bash",
      "tags": ["linux", "concat"],
      "title": "[Linux] Concatenate PDFs"
    },
    {
      "code": "du -sch $(\\ls -A) | sort -h",
      "language": "bash",
      "tags": ["linux", "disk", "storage"],
      "title": "[Linux] Show disk space usage for current folder"
    },
    {
      "code": "xmodmap -e \"clear lock\"\nxmodmap -e \"keysym Caps_Lock = Escape\"\n",
      "language": "bash",
      "tags": ["linux", "keyboard", "xmodmap"],
      "title": "[Linux] Remap caps lock to escape"
    },
    {
      "code": "xset r rate 270 35",
      "language": "bash",
      "tags": ["linux", "keyboard", "xset"],
      "title": "[Linux] Change key repeat rate and delay"
    },
    {
      "code": "yay -S cups\nsystemctl enable org.cups.cupsd.service\nsystemctl start org.cups.cupsd.service\nsudo usermod -a -G sys jayden # Prevent forbidden errors\nxdg-open http://localhost:631\n",
      "language": "bash",
      "struggle": true,
      "tags": ["linux", "printing", "CUPS"],
      "title": "[Linux] Setting up CUPS"
    },
    {
      "code": "lspci -vnn | rg VGA -A 12",
      "tags": ["linux", "sysinfo"],
      "title": "[Linux] Show GPU information"
    },
    {
      "code": ":v/pattern/d\n",
      "tags": ["vim", "command", "regex"],
      "title": "[Vim] Retain all lines matching a pattern"
    },
    {
      "code": ":g/pattern/d\n",
      "tags": ["vim", "command", "regex"],
      "title": "[Vim] Delete all lines matching pattern"
    },
    {
      "code": "timedatectl set-timezone Canada/Mountain",
      "tags": ["oneliners", "linux", "timedatectl"],
      "title": "[Linux] Change the timezone"
    },
    {
      "code": "![Desc](img/image.png \"Desc\")",
      "tags": ["oneliners", "markdown", "image", "md"],
      "title": "[Markdown] Image"
    },
    {
      "code": "[...Array(n).keys()].map(e => ...)",
      "language": "javascript",
      "tags": ["oneliners", "javascript", "typescript", "js", "ts"],
      "title": "[JavaScript] Array with numbers 0..n"
    },
    {
      "code": "git rev-list --count --all",
      "tags": ["oneliners", "git"],
      "title": "[Git] Show the total number of commits"
    },
    {
      "code": "const args = process.argv.slice(2).filter((a) => !a.startsWith(\"-\"));\nconst flags = Object.fromEntries(\n  process.argv\n    .map((a) => {\n      const [didMatch, flag, arg] = a.match(/--?(\\w+)(?:=(.*))?/) ?? [];\n      return didMatch !== undefined ? [flag, arg ?? true] : undefined;\n    })\n    .filter((f) => f !== undefined)\n);\n",
      "language": "javascript",
      "tags": ["parse", "command", "arg", "get", "yarg"],
      "title": "[JavaScript] Parse command line arguments & flags"
    },
    {
      "code": "if [ -z \"$variable\" ]; then echo \"blank\"; else echo \"not blank\"; fi",
      "language": "bash",
      "tags": ["shell", "variable"],
      "title": "[Shell] Check if variable is empty or unset"
    },
    {
      "code": "my_pngs=(./folder/**/*.png)",
      "language": "bash",
      "tags": ["shell", "variable", "glob", "array"],
      "title": "[Shell] Glob pattern to array"
    },
    {
      "code": "my_array+=( \"$item\" )",
      "language": "bash",
      "tags": ["shell", "variable", "push", "append"],
      "title": "[Shell] Push to array"
    },
    {
      "code": "path=\"/path/to/the/file.txt\"\necho ${path:h}\n# /path/to/the\necho ${path:t}\n# file.txt\necho ${path:r}\n# /path/to/the/file\necho ${path:t:r}\n# file\n",
      "language": "bash",
      "tags": ["shell", "print", "variable", "ext", "path"],
      "title": "[Shell] Print path without extension/just file name"
    },
    {
      "code": "[[ \"$?\" = \"0\" ]] && echo \"Ok\" || echo \"fail\"",
      "language": "bash",
      "tags": ["shell", "variable", "exit", "status", "result", "previous"],
      "title": "[Shell] Check exit code of last command"
    },
    {
      "code": "while test $# -gt 0\ndo\n    case \"$1\" in\n        --flag) echo \"flag\"\n            ;;\n        *) echo \"parameter\"\n            ;;\n    esac\n    shift\ndone\n",
      "language": "bash",
      "tags": ["shell", "arguments", "args"],
      "title": "[Shell] Iterate arguments"
    },
    {
      "code": "convert image.png -crop <size_x>x<size_y>+<position_x>+<position_y> out.png\n",
      "language": "bash",
      "tags": ["imagemagick", "convert", "cut"],
      "title": "[ImageMagick] Crop"
    },
    {
      "code": "convert image.png -resize 200% out.png\n",
      "language": "bash",
      "tags": ["imagemagick", "convert", "resize"],
      "title": "[ImageMagick] Scale"
    },
    {
      "code": "convert image.png -threshold 80% out.png\n",
      "language": "bash",
      "tags": ["imagemagick", "convert", "pixel"],
      "title": "[ImageMagick] Retain pixels over a certain brightness threshold"
    },
    {
      "code": "convert image.png -negate out.png\n",
      "language": "bash",
      "tags": ["imagemagick", "convert", "negate"],
      "title": "[ImageMagick] Invert"
    },
    {
      "code": "const [match, group1, group2, group3] = myString.match(/regex/) ?? [];\n",
      "language": "javascript",
      "tags": ["regex", "javascript", "js", "typescript", "ts"],
      "title": "[JavaScript] Regex one-liner"
    },
    {
      "code": "const regex = /the_regex/g;\n\nlet m;\n\ndo {\n  m = regex.exec(str);\n  if (m) {\n    ...\n  }\n} while (m !== null);\n",
      "language": "javascript",
      "tags": ["regex", "javascript", "js", "typescript", "ts"],
      "title": "[JavaScript] Get all regex matches"
    },
    {
      "code": "use openssl::ssl::{SslConnector, SslMethod};\nuse postgres_openssl::MakeTlsConnector;\nuse r2d2_postgres::PostgresConnectionManager;\nuse std::thread;\n\nfn main() {\n    let mut builder = SslConnector::builder(SslMethod::tls()).unwrap();\n    builder.set_verify(openssl::ssl::SslVerifyMode::NONE);\n    let connector = MakeTlsConnector::new(builder.build());\n\n    let manager = PostgresConnectionManager::new(\n        \"DATABASE_URL\".parse().unwrap(),\n        connector,\n    );\n    let pool = r2d2::Pool::new(manager).unwrap();\n\n    let pool = pool.clone();\n    let join_handler = thread::spawn(move || {\n        println!(\"doing the stuff\");\n        let mut client = pool.get().unwrap();\n        let results = client.query(\"SELECT * FROM test_data\", &[]).unwrap();\n\n        println!(\"{:#?}\", results[0].get::<usize, String>(0));\n    });\n\n    println!(\"waiting\");\n    join_handler.join().unwrap();\n    println!(\"done\");\n}\n",
      "language": "rust",
      "struggle": true,
      "tags": ["SETTMMTOHTS", "rust", "postgres"],
      "title": "[Rust] Connect to a postgres db with SSL and an r2d2 connection pool"
    }
  ]
}
