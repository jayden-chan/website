{
  "interests": [
    "Coffee / cooking",
    "Free Software / self-hosting",
    "Mechanical keyboards",
    "Gaming",
    "Formula 1"
  ],
  "awards": [
    {
      "desc": "Western Engineering Competition (Programming)",
      "print": true,
      "result": "Winner",
      "time": "2020"
    },
    {
      "desc": "UVic Engineering Competition (Programming)",
      "print": true,
      "result": "Winner",
      "time": "2018, 2019"
    },
    {
      "desc": "UVic ENGR 120 Design Competition",
      "print": true,
      "result": "Winner",
      "time": "2018"
    },
    {
      "desc": "Western Canada Regional Robotics Competition",
      "print": true,
      "result": "Winner",
      "time": "2016"
    },
    {
      "desc": "China Robotics Challenge",
      "print": false,
      "result": "Winner",
      "time": "2016"
    },
    {
      "desc": "Western Canada Regional Robotics Competition",
      "print": false,
      "result": "Innovation in Control Award",
      "time": "2015, 2016"
    }
  ],
  "experience": [
    {
      "company": "Dyspatch",
      "location": "Victoria, Canada",
      "print": true,
      "roles": [
        "Implemented an improved version of Dyspatch's internal one-click Kubernetes deployment & monitoring tool",
        "Connected Rancher, GitHub, S3, DynamoDB, and Slack APIs for a cohesive and polished deployment experience",
        "Reverse engineered Rancher CLI to enable making Kubernetes deployments through their un-documented API",
        "Implemented high-availability distributed GraphQL subscriptions with Apollo and Redis"
      ],
      "time": "Sep 2021 - Apr 2022",
      "title": "Software Developer",
      "website": "https://www.dyspatch.io/"
    },
    {
      "company": "Launchcode",
      "location": "Calgary, Canada",
      "print": true,
      "roles": [
        "Developed core business logic for the PatronScan ID Scanner product",
        "Implemented a faster and more reliable ID detection algorithm using OpenCV and Rust",
        "Built a responsive web frontend for Launchcode's \"Enjoyn\" product using React & Chakra",
        "Implemented core video and audio conferencing features for the Enjoyn Android app"
      ],
      "time": "Sep 2020 - Apr 2021",
      "title": "Software Developer",
      "website": "https://lc.dev"
    },
    {
      "company": "Referral SaaSquatch",
      "location": "Victoria, Canada",
      "print": true,
      "roles": [
        "Developed core logic for the SaaSquatch Growth Automation platform with using Express, Heroku, and Contentful",
        "Implemented a new frontend build process from scratch using Babel & Webpack, adding TypeScript support and reducing build times from ~2 minutes to 400 ms",
        "Helped migrate the SaaSquatch analytics backend from Keen to BigQuery, including a custom query server to translate Keen API calls into BigQuery SQL",
        "Created a NodeJS command line program for compiling Gherkin specification documents into spreadsheets for manual QA"
      ],
      "time": "Jan 2019 - Apr 2020",
      "title": "Software Developer",
      "website": "https://www.saasquatch.com"
    },
    {
      "company": "Bickert Robotics",
      "location": "Calgary, Canada",
      "print": false,
      "roles": [
        "Developed a software suite to power Bickert Robotics' automated bartender robot",
        "Implemented a REST API using Go and PostgreSQL for managing drink recipes, ingredients, robot configurations, and customer credentials",
        "Developed an Android app for directly controlling the robot using Java and the Android SDK",
        "Designed a web app for viewing / editing drinks, users, and tanks using React. Included page for viewing the drink queue on the robot's embedded display",
        "Wrote embedded Python code to receive user input and autonomously pour drinks based on JSON recipe data"
      ],
      "time": "Apr 2018 - Sep 2018",
      "title": "Robotics Software Technician",
      "website": "https://bickertrobotics.com"
    }
  ],
  "projects": [
    {
      "github": "puggies",
      "print": true,
      "roles": [
        "Puggies is a self-hosted CS:GO demo analyzer and statistics platform",
        "Automatically parses CS:GO demos to extract statistics such as k/a/d, K/D, ADR, HS%, HLTV, RWS and many more",
        "Supports demos from Valve MM, FACEIT, ESEA, and pugsetup",
        "Uses docker-first containerized deployment method for easy setup and upgrades",
        "Includes a beautiful and fast interface designed with React and Chakra"
      ],
      "stack": "Go / React",
      "time": "2022",
      "title": "puggies"
    },
    {
      "github": "bblp",
      "print": true,
      "roles": [
        "bblp is an implementation of the Revised Simplex Method for solving Linear Programs",
        "Uses the linear algebraic Revised Simplex Method for computing an optimal solution to a linear function and set of constraints",
        "Includes both primal and dual solvers with the two-phase primal-dual method for initially-infeasible problems",
        "Implements the largest coefficient pivoting rule with lexicographic perturbation for cycle avoidance"
      ],
      "stack": "Rust",
      "time": "2021",
      "title": "bblp"
    },
    {
      "github": "nit",
      "print": true,
      "roles": [
        "Nit is a physically-based raytracer built with Rust",
        "Uses a Monte-Carlo path-tracing approach to rendering realistic scenes based on the physical properties of light",
        "Implements a sub-linear collision detection algorithm with a Bounding-Volume Hierarchy",
        "Supports loading polygon meshes from STL files",
        "Parallelized across any number of CPU cores"
      ],
      "stack": "Rust",
      "time": "2019",
      "title": "nit"
    },
    {
      "github": "battlesnake-2020",
      "print": true,
      "roles": [
        "Developed an artificial intelligence to compete in the Battlesnake programming competition",
        "Uses parallel Monte-Carlo Tree Search for assessing future game states",
        "Implemented a variety of other common algorithms for use in the Monte-Carlo rollout phase",
        "Created a moving-average analyzer to match other snakes' behavior to a profile"
      ],
      "stack": "Rust / Go",
      "time": "2019-2020",
      "title": "Battlesnake"
    },
    {
      "github": "ENGR120-Vex",
      "print": false,
      "roles": [
        "Designed and built a small prototype robot for connecting wires on the ocean floor",
        "Created and programmed a rotating photosensor mechanism to detect the attachment point",
        "Implemented PID and slew rate controllers for quickly and smoothly driving to the attachment point",
        "Placed 1st in a course-wide competition with an average connection time of 5.99 seconds"
      ],
      "stack": "C",
      "time": "2018",
      "title": "UVic ENGR 120 Design Project"
    }
  ],
  "skills": {
    "lang": [
      "JavaScript / TypeScript",
      "Rust",
      "C / C++",
      "HTML / CSS / SCSS",
      "Go"
    ],
    "tech": [
      "React / React Native",
      "Docker / docker-compose",
      "Kubernetes / Rancher",
      "nginx",
      "PostgreSQL / MySQL / MariaDB",
      "REST / GraphQL"
    ],
    "tools": ["Git", "Linux", "Vim", "LaTeX"]
  }
}
